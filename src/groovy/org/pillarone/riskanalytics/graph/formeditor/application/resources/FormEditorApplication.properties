resource.images.path=icons
#--------- deployment parameter ------------------------
#-- the vendor of the application used in jnlp.
#Application.vendor=
#-- a URL pointing to where more information on this application can be found used by jnlp.
Application.homepage=http://www.pillarone.org/
#-- a short description of the application used in jnlp.
Application.description=Application for editing graph models by using forms
#-- the path to an image file relative to the document root that is used to represent the application.
Application.icon.64=${resource.images.path}/p1.png
#-- the path to an image file relative to the document root that is used as the application's favicon.
Application.icon.16=${resource.images.path}/p1.png
#-- the path to an image file relative to the document root that is used as splash screen for the application.
Application.splash=${resource.images.path}/p1.png

#-- the title of the application used in jnlp and as the title of the web page in applet deployment.
Application.title=Model Editor

entity=item

main.Frame.title=${Application.title}

main.Frame.iconImage=${resource.images.path}/p1-application.png
main.Frame.size=1200,900

#logo.Label.icon=${resource.images.path}/p1-logosmall.png

newModelAction.Action.text = &New
newModelAction.Action.icon = ${resource.images.path}/add.png
newModelAction.Action.accelerator = shortcut N
newModelAction.Action.shortDescription = Create a new model or composed component.
newModelAction.Action.longDescription = Opens an editor page to specify a new model or composed component.

importModelAction.Action.text = &Import
importModelAction.Action.icon = ${resource.images.path}/import.png
importModelAction.Action.shortDescription = Imports a model/component.
importModelAction.Action.longDescription = Imports a model/component by specifying a class name.

saveModelAction.Action.text = &Save
saveModelAction.Action.icon = ${resource.images.path}/save.png
saveModelAction.Action.shortDescription = Saves the model/component to the DB.
saveModelAction.Action.longDescription = Saves the model/component to the graph model registry (DB).

exportModelToGroovyAction.Action.text = &Export Model
exportModelToGroovyAction.Action.icon = ${resource.images.path}/export.png
exportModelToGroovyAction.Action.shortDescription = Exports the model/component to Groovy.
exportModelToGroovyAction.Action.longDescription = Exports the model/component to Groovy.

exportModelToApplicationAction.Action.text = &Deploy
exportModelToApplicationAction.Action.icon = ${resource.images.path}/export.png
exportModelToApplicationAction.Action.shortDescription = Exports the model/component to the RA application.
exportModelToApplicationAction.Action.longDescription = Exports the model/component to the RA application and removes it from the graph model registry.

createParametersAction.Action.text = &Create Parameters
createParametersAction.Action.icon = ${resource.images.path}/add.png
createParametersAction.Action.shortDescription = Create parameters.
createParametersAction.Action.longDescription = Create parameters.

importParametersAction.Action.text = &Import Parameters
importParametersAction.Action.icon = ${resource.images.path}/add.png
importParametersAction.Action.shortDescription = Import parameters.
importParametersAction.Action.longDescription = Import parameters from a groovy file.

exportParametersAction.Action.text = &Export Parameters
exportParametersAction.Action.icon = ${resource.images.path}/export.png
exportParametersAction.Action.shortDescription = Exports the parameters.
exportParametersAction.Action.longDescription = Exports the parameters to a groovy file.

simulateAction.Action.text = &Simulate
simulateAction.Action.icon = ${resource.images.path}/add.png
simulateAction.Action.shortDescription = Start a simulation.
simulateAction.Action.longDescription = Start a simulation with a single iteration given the selected model and data.
